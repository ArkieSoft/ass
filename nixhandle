#!/usr/bin/env bash

platform="$(uname)"
configpath=$HOME/.config/nixh/conf

switch() {
  case $os in
    m)
      darwin-rebuild switch --flake .
      figlet "Switched" | lolcat
      nixgit
      ;;
    n)
      nixos-rebuild --use-remote-sudo --impure switch
      figlet "Switched" | lolcat
      nixgit
      ;;
    l)
      home-manager switch --flake .
      ;;
    *)
      echo "uhhh...."
      exit 1
      ;;
  esac
}

update() {
  case $os in
    m)
      nix flake update --flake .
      darwin-rebuild switch --flake .
      figlet "Updooted" | lolcat
      git add .
      nixgit
      ;;
    n)
      sudo nix flake update
      nixos-rebuild --use-remote-sudo --impure boot
      figlet "Updooted" | lolcat
      git add .
      nixgit

      ;;
    l)
      nix flake update
      home-manager switch --flake .
      ;;
    *)
      echo "uhhhh....."
      exit 1
      ;;
  esac
}

nixgit() {
  if [ -d .git ];then
    echo "Do you want to make a commit? [y/N]: "
    read git
  
    if [[ $git = y ]] || [[ $git = Y ]];then
      echo "What to label for commit?: "
      read commit
      git commit -m "$commit"
    elif [[ $git = e ]] || [[ $git = exit ]];then
      figlet "Complete" | lolcat
      exit 1
    else
      if [[ $1 = g ]] || [[ $1 = "git" ]];then
        echo "This was a huge waste of time!"
        exit 1
      else
        clean
      fi
    fi
  
    echo "Do you want to push the commit? [y/N]: "
    read push
  
    if [[ $push == y ]] || [[ $push == Y ]];then
      git push
      figlet "Commit Pushed"
      if [[ $1 != g ]] && [[ $1 != git ]]; then
        clean
      else
        figlet "Commit Pushed" | lolcat
        exit 1
      fi
    elif [[ $push = e ]] || [[ $push = exit ]];then
      figlet "Complete!" | lolcat
    else
      if [[ $1 = g ]] || [[ $1 = git ]];then
        echo "This was a huge waste of time"
        exit 1
      else
        clean
      fi
    fi
  else
    echo "No Git Repo Found!"
    clean
  fi
}

clean() {
  echo "Want to clean the old generations and old files? [y/N]: "
  read clean
  if [[ $clean == y ]] || [[ $clean == Y ]];then
    sudo nix-env --profile /nix/var/nix/profiles/system --delete-generations old
    echo "Cleaning Files"
    sudo nix store gc
    sudo nix-collect-garbage
    sudo nix store optimise
    figlet "Cleanup Complete" | lolcat
    exit 1
  elif [[ $clean = e ]] || [[ $clean = exit ]];then
    figlet "Complete" | lolcat
    exit 1
  else
    case $1 in
      g | git)
        figlet "Commit Made" | lolcat
        exit 1
        ;;
      u | update)
        figlet "Updated" | lolcat
        exit 1
        ;;
      s | switch)
        figlet "Switched" | lolcat
        exit 1
        ;;
      *)
        echo "uhhhh"
        exit 1
        ;;
    esac
  fi
}

if [[ $1 == "reset" ]]; then
  rm -rf $HOME/.config/nixh/conf
  echo "Removed saved path at ~/.config/nixh/path. To put in a new one, rerun this application"
  exit 1
fi

if [ -f $configpath ]; then
  source $configpath
else
  if ! [ -d $HOME/.config/nixh ]; then
    mkdir $HOME/.config/nixh
  fi
  touch $configpath
  case "$platform" in
    Darwin)
      echo "Enter a path where you keep your nix config: (Default: ~/.config/nix)"
      read nixpath

      if ! [ $nixpath ]; then
        nixpath="$HOME/.config/nix"
      fi
      echo "NIXPATH=$nixpath" >> $configpath
      ;;
    Linux)
      source /etc/os-release
      if [[ $ID == nixos ]]; then
        echo "Enter a path where you keep your nix config: (Default: /etc/nixos)"
        read nixpath
        if ! [ $nixpath ]; then
          nixpath="/etc/nixos"
        fi
        echo "NIXPATH=$nixpath" >> $configpath
      else
        echo "Enter a path where you keep your nix config: (Default: ~/.config/nix)"
        read nixpath
        if ! [ $nixpath ]; then
          nixpath="$HOME/.config/nix"
        fi
        echo "NIXPATH=$nixpath" >> $configpath
      fi
      ;;
    *)
      echo "Do you even have an OS at this point?"
    ;;
  esac
  
  if [ -f "$nixpath/flake.nix" ]; then
    echo "Are we building off the flake? [y/n];"
    read qflake
    if [[ $qflake == "y" ]] || [[ $qflake == "Y" ]]; then
      FLAKE=1
      echo "Are you running home-manager as a flake module? [y/n]"
      read qhm
      if [[ $qhm = "y" ]] || [[ $qhm = "Y" ]]; then
        HOME_MANAGER_FLAKE=1
      elif [[ $qhm = "n" ]] || [[ $qhm = "N" ]]; then
        echo "Are you running home-manager as standalone? [y/n]"
        read qhms
        if [[ $qhms == "y" ]] || [[ $qhms == "Y" ]]; then
          HOME_MANAGER_FLAKE=2
        else
          echo "I am assuming you aren't using home-manager"
          HOME_MANAGER_FLAKE=0
        fi
      fi
    elif [[ $qflake == "n" ]] || [[ $qflake == "N" ]]; then
      FLAKE=0
    else
      echo "Answer the damn question"
      exit 1
    fi
  fi

  source $configpath
fi


case $platform in
  Darwin)
    cd $NIXPATH
    os="m"
    ;;
  Linux)
    source /etc/os-release
    if [[ $ID == nixos ]]; then
      cd $NIXPATH
      os="n"
    else
      cd $NIXPATH
      os="l"
    fi
    ;;
  *)
    echo "Wtf are you doing?"
    exit 1
    ;;
esac

if [[ -d .git ]];then
  git add .
fi

case $1 in
  g | git)
    nixgit $1
    ;;
  u | update)
    update
    ;;
  s | switch)
    switch
    ;;
  c | clean)
    clean $1
    ;;
  *)
    echo "No arguments, provided! g for Git, u for Update, s for Switch"
    exit 1
esac

